// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace connector_client {

namespace {

const ::google_public::protobuf::Descriptor* CSHead_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CSHead_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* CSSyn_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CSSyn_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* CSSynAck_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CSSynAck_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* CSAuth_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CSAuth_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* CSPassport_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CSPassport_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* CSStart_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CSStart_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* CSError_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CSError_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* CSBody_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CSBody_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* CSMsg_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  CSMsg_reflection_ = NULL;
const ::google_public::protobuf::EnumDescriptor* ConnectorMagic_descriptor_ = NULL;
const ::google_public::protobuf::EnumDescriptor* BodyCmdId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eproto() {
  protobuf_AddDesc_client_2eproto();
  const ::google_public::protobuf::FileDescriptor* file =
    ::google_public::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.proto");
  GOOGLE_CHECK(file != NULL);
  CSHead_descriptor_ = file->message_type(0);
  static const int CSHead_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSHead, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSHead, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSHead, bodyid_),
  };
  CSHead_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CSHead_descriptor_,
      CSHead::default_instance_,
      CSHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSHead, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CSHead));
  CSSyn_descriptor_ = file->message_type(1);
  static const int CSSyn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSyn, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSyn, openid_),
  };
  CSSyn_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CSSyn_descriptor_,
      CSSyn::default_instance_,
      CSSyn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSyn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSyn, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSyn));
  CSSynAck_descriptor_ = file->message_type(2);
  static const int CSSynAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSynAck, secretkey_),
  };
  CSSynAck_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CSSynAck_descriptor_,
      CSSynAck::default_instance_,
      CSSynAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSynAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSynAck, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSynAck));
  CSAuth_descriptor_ = file->message_type(3);
  static const int CSAuth_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAuth, token_),
  };
  CSAuth_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CSAuth_descriptor_,
      CSAuth::default_instance_,
      CSAuth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAuth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSAuth, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CSAuth));
  CSPassport_descriptor_ = file->message_type(4);
  static const int CSPassport_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPassport, passport_),
  };
  CSPassport_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CSPassport_descriptor_,
      CSPassport::default_instance_,
      CSPassport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPassport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSPassport, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CSPassport));
  CSStart_descriptor_ = file->message_type(5);
  static const int CSStart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStart, code_),
  };
  CSStart_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CSStart_descriptor_,
      CSStart::default_instance_,
      CSStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStart, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CSStart));
  CSError_descriptor_ = file->message_type(6);
  static const int CSError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSError, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSError, desc_),
  };
  CSError_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CSError_descriptor_,
      CSError::default_instance_,
      CSError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSError, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CSError));
  CSBody_descriptor_ = file->message_type(7);
  static const int CSBody_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBody, syn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBody, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBody, auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBody, passport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBody, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBody, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBody, error_),
  };
  CSBody_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CSBody_descriptor_,
      CSBody::default_instance_,
      CSBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBody, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBody));
  CSMsg_descriptor_ = file->message_type(8);
  static const int CSMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, body_),
  };
  CSMsg_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      CSMsg_descriptor_,
      CSMsg::default_instance_,
      CSMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsg, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsg));
  ConnectorMagic_descriptor_ = file->enum_type(0);
  BodyCmdId_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_public::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSHead_descriptor_, &CSHead::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSyn_descriptor_, &CSSyn::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSynAck_descriptor_, &CSSynAck::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSAuth_descriptor_, &CSAuth::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSPassport_descriptor_, &CSPassport::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSStart_descriptor_, &CSStart::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSError_descriptor_, &CSError::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBody_descriptor_, &CSBody::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsg_descriptor_, &CSMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eproto() {
  delete CSHead::default_instance_;
  delete CSHead_reflection_;
  delete CSSyn::default_instance_;
  delete CSSyn_reflection_;
  delete CSSynAck::default_instance_;
  delete CSSynAck_reflection_;
  delete CSAuth::default_instance_;
  delete CSAuth_reflection_;
  delete CSPassport::default_instance_;
  delete CSPassport_reflection_;
  delete CSStart::default_instance_;
  delete CSStart_reflection_;
  delete CSError::default_instance_;
  delete CSError_reflection_;
  delete CSBody::default_instance_;
  delete CSBody_reflection_;
  delete CSMsg::default_instance_;
  delete CSMsg_reflection_;
}

void protobuf_AddDesc_client_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_public::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014client.proto\022\020connector_client\"@\n\006CSHe"
    "ad\022\024\n\005magic\030\001 \002(\005:\00513124\022\020\n\010sequence\030\002 \002"
    "(\003\022\016\n\006bodyid\030\003 \002(\005\"&\n\005CSSyn\022\r\n\005appid\030\001 \002"
    "(\t\022\016\n\006openid\030\002 \002(\t\"\035\n\010CSSynAck\022\021\n\tsecret"
    "key\030\001 \002(\t\"\027\n\006CSAuth\022\r\n\005token\030\001 \002(\t\"\036\n\nCS"
    "Passport\022\020\n\010passport\030\001 \001(\003\"\027\n\007CSStart\022\014\n"
    "\004code\030\001 \001(\005\"%\n\007CSError\022\014\n\004code\030\001 \002(\005\022\014\n\004"
    "desc\030\002 \002(\t\"\221\002\n\006CSBody\022$\n\003syn\030\001 \001(\0132\027.con"
    "nector_client.CSSyn\022\'\n\003ack\030\002 \001(\0132\032.conne"
    "ctor_client.CSSynAck\022&\n\004auth\030\003 \001(\0132\030.con"
    "nector_client.CSAuth\022.\n\010passport\030\004 \001(\0132\034"
    ".connector_client.CSPassport\022(\n\005start\030\005 "
    "\001(\0132\031.connector_client.CSStart\022\014\n\004data\030\020"
    " \001(\014\022(\n\005error\030d \001(\0132\031.connector_client.C"
    "SError\"W\n\005CSMsg\022&\n\004head\030\001 \002(\0132\030.connecto"
    "r_client.CSHead\022&\n\004body\030\002 \002(\0132\030.connecto"
    "r_client.CSBody*\"\n\016ConnectorMagic\022\020\n\013MAG"
    "IC_CS_V1\020\304f*r\n\tBodyCmdId\022\007\n\003SYN\020\001\022\n\n\006SYN"
    "ACK\020\002\022\022\n\016AUTHENTICATION\020\003\022\014\n\010PASSPORT\020\004\022"
    "\r\n\tSTART_APP\020\005\022\024\n\020DATA_TRANSPARENT\020\020\022\t\n\005"
    "ERROR\020d", 807);
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.proto", &protobuf_RegisterTypes);
  CSHead::default_instance_ = new CSHead();
  CSSyn::default_instance_ = new CSSyn();
  CSSynAck::default_instance_ = new CSSynAck();
  CSAuth::default_instance_ = new CSAuth();
  CSPassport::default_instance_ = new CSPassport();
  CSStart::default_instance_ = new CSStart();
  CSError::default_instance_ = new CSError();
  CSBody::default_instance_ = new CSBody();
  CSMsg::default_instance_ = new CSMsg();
  CSHead::default_instance_->InitAsDefaultInstance();
  CSSyn::default_instance_->InitAsDefaultInstance();
  CSSynAck::default_instance_->InitAsDefaultInstance();
  CSAuth::default_instance_->InitAsDefaultInstance();
  CSPassport::default_instance_->InitAsDefaultInstance();
  CSStart::default_instance_->InitAsDefaultInstance();
  CSError::default_instance_->InitAsDefaultInstance();
  CSBody::default_instance_->InitAsDefaultInstance();
  CSMsg::default_instance_->InitAsDefaultInstance();
  ::google_public::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eproto {
  StaticDescriptorInitializer_client_2eproto() {
    protobuf_AddDesc_client_2eproto();
  }
} static_descriptor_initializer_client_2eproto_;
const ::google_public::protobuf::EnumDescriptor* ConnectorMagic_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectorMagic_descriptor_;
}
bool ConnectorMagic_IsValid(int value) {
  switch(value) {
    case 13124:
      return true;
    default:
      return false;
  }
}

const ::google_public::protobuf::EnumDescriptor* BodyCmdId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BodyCmdId_descriptor_;
}
bool BodyCmdId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 16:
    case 100:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSHead::kMagicFieldNumber;
const int CSHead::kSequenceFieldNumber;
const int CSHead::kBodyidFieldNumber;
#endif  // !_MSC_VER

CSHead::CSHead()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void CSHead::InitAsDefaultInstance() {
}

CSHead::CSHead(const CSHead& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSHead::SharedCtor() {
  _cached_size_ = 0;
  magic_ = 13124;
  sequence_ = GOOGLE_LONGLONG(0);
  bodyid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSHead::~CSHead() {
  SharedDtor();
}

void CSHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CSHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSHead_descriptor_;
}

const CSHead& CSHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

CSHead* CSHead::default_instance_ = NULL;

CSHead* CSHead::New() const {
  return new CSHead;
}

void CSHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    magic_ = 13124;
    sequence_ = GOOGLE_LONGLONG(0);
    bodyid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSHead::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 magic = 1 [default = 13124];
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // required int64 sequence = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bodyid;
        break;
      }

      // required int32 bodyid = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSHead::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required int32 magic = 1 [default = 13124];
  if (has_magic()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->magic(), output);
  }

  // required int64 sequence = 2;
  if (has_sequence()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(2, this->sequence(), output);
  }

  // required int32 bodyid = 3;
  if (has_bodyid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->bodyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* CSHead::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required int32 magic = 1 [default = 13124];
  if (has_magic()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->magic(), target);
  }

  // required int64 sequence = 2;
  if (has_sequence()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sequence(), target);
  }

  // required int32 bodyid = 3;
  if (has_bodyid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bodyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 magic = 1 [default = 13124];
    if (has_magic()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->magic());
    }

    // required int64 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence());
    }

    // required int32 bodyid = 3;
    if (has_bodyid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->bodyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSHead::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSHead* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CSHead*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSHead::MergeFrom(const CSHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSHead::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSHead::CopyFrom(const CSHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSHead::Swap(CSHead* other) {
  if (other != this) {
    std::swap(magic_, other->magic_);
    std::swap(sequence_, other->sequence_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CSHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CSHead_descriptor_;
  metadata.reflection = CSHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSyn::kAppidFieldNumber;
const int CSSyn::kOpenidFieldNumber;
#endif  // !_MSC_VER

CSSyn::CSSyn()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void CSSyn::InitAsDefaultInstance() {
}

CSSyn::CSSyn(const CSSyn& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSyn::SharedCtor() {
  _cached_size_ = 0;
  appid_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSyn::~CSSyn() {
  SharedDtor();
}

void CSSyn::SharedDtor() {
  if (appid_ != &::google_public::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (openid_ != &::google_public::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (this != default_instance_) {
  }
}

void CSSyn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CSSyn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSyn_descriptor_;
}

const CSSyn& CSSyn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

CSSyn* CSSyn::default_instance_ = NULL;

CSSyn* CSSyn::New() const {
  return new CSSyn;
}

void CSSyn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appid()) {
      if (appid_ != &::google_public::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google_public::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSyn::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string appid = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appid().data(), this->appid().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // required string openid = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSyn::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string appid = 1;
  if (has_appid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->appid(), output);
  }

  // required string openid = 2;
  if (has_openid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* CSSyn::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string appid = 1;
  if (has_appid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appid(), target);
  }

  // required string openid = 2;
  if (has_openid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSyn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // required string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSyn::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSyn* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CSSyn*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSyn::MergeFrom(const CSSyn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSyn::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSyn::CopyFrom(const CSSyn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSSyn::Swap(CSSyn* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(openid_, other->openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CSSyn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CSSyn_descriptor_;
  metadata.reflection = CSSyn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSynAck::kSecretkeyFieldNumber;
#endif  // !_MSC_VER

CSSynAck::CSSynAck()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void CSSynAck::InitAsDefaultInstance() {
}

CSSynAck::CSSynAck(const CSSynAck& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSynAck::SharedCtor() {
  _cached_size_ = 0;
  secretkey_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSynAck::~CSSynAck() {
  SharedDtor();
}

void CSSynAck::SharedDtor() {
  if (secretkey_ != &::google_public::protobuf::internal::kEmptyString) {
    delete secretkey_;
  }
  if (this != default_instance_) {
  }
}

void CSSynAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CSSynAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSynAck_descriptor_;
}

const CSSynAck& CSSynAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

CSSynAck* CSSynAck::default_instance_ = NULL;

CSSynAck* CSSynAck::New() const {
  return new CSSynAck;
}

void CSSynAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_secretkey()) {
      if (secretkey_ != &::google_public::protobuf::internal::kEmptyString) {
        secretkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSynAck::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string secretkey = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secretkey()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secretkey().data(), this->secretkey().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSynAck::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string secretkey = 1;
  if (has_secretkey()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secretkey().data(), this->secretkey().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->secretkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* CSSynAck::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string secretkey = 1;
  if (has_secretkey()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secretkey().data(), this->secretkey().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->secretkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSynAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string secretkey = 1;
    if (has_secretkey()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->secretkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSynAck::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSynAck* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CSSynAck*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSynAck::MergeFrom(const CSSynAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secretkey()) {
      set_secretkey(from.secretkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSynAck::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSynAck::CopyFrom(const CSSynAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSynAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSSynAck::Swap(CSSynAck* other) {
  if (other != this) {
    std::swap(secretkey_, other->secretkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CSSynAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CSSynAck_descriptor_;
  metadata.reflection = CSSynAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSAuth::kTokenFieldNumber;
#endif  // !_MSC_VER

CSAuth::CSAuth()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void CSAuth::InitAsDefaultInstance() {
}

CSAuth::CSAuth(const CSAuth& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSAuth::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAuth::~CSAuth() {
  SharedDtor();
}

void CSAuth::SharedDtor() {
  if (token_ != &::google_public::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void CSAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CSAuth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSAuth_descriptor_;
}

const CSAuth& CSAuth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

CSAuth* CSAuth::default_instance_ = NULL;

CSAuth* CSAuth::New() const {
  return new CSAuth;
}

void CSAuth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google_public::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSAuth::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAuth::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string token = 1;
  if (has_token()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* CSAuth::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string token = 1;
  if (has_token()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAuth::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSAuth* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CSAuth*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSAuth::MergeFrom(const CSAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSAuth::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSAuth::CopyFrom(const CSAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAuth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSAuth::Swap(CSAuth* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CSAuth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CSAuth_descriptor_;
  metadata.reflection = CSAuth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSPassport::kPassportFieldNumber;
#endif  // !_MSC_VER

CSPassport::CSPassport()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void CSPassport::InitAsDefaultInstance() {
}

CSPassport::CSPassport(const CSPassport& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSPassport::SharedCtor() {
  _cached_size_ = 0;
  passport_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPassport::~CSPassport() {
  SharedDtor();
}

void CSPassport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSPassport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CSPassport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSPassport_descriptor_;
}

const CSPassport& CSPassport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

CSPassport* CSPassport::default_instance_ = NULL;

CSPassport* CSPassport::New() const {
  return new CSPassport;
}

void CSPassport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    passport_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSPassport::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 passport = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &passport_)));
          set_has_passport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPassport::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // optional int64 passport = 1;
  if (has_passport()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(1, this->passport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* CSPassport::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // optional int64 passport = 1;
  if (has_passport()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->passport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSPassport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 passport = 1;
    if (has_passport()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->passport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPassport::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSPassport* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CSPassport*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSPassport::MergeFrom(const CSPassport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passport()) {
      set_passport(from.passport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSPassport::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSPassport::CopyFrom(const CSPassport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPassport::IsInitialized() const {

  return true;
}

void CSPassport::Swap(CSPassport* other) {
  if (other != this) {
    std::swap(passport_, other->passport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CSPassport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CSPassport_descriptor_;
  metadata.reflection = CSPassport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSStart::kCodeFieldNumber;
#endif  // !_MSC_VER

CSStart::CSStart()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void CSStart::InitAsDefaultInstance() {
}

CSStart::CSStart(const CSStart& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSStart::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSStart::~CSStart() {
  SharedDtor();
}

void CSStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CSStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSStart_descriptor_;
}

const CSStart& CSStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

CSStart* CSStart::default_instance_ = NULL;

CSStart* CSStart::New() const {
  return new CSStart;
}

void CSStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSStart::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSStart::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* CSStart::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSStart::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSStart* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CSStart*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSStart::MergeFrom(const CSStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSStart::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSStart::CopyFrom(const CSStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSStart::IsInitialized() const {

  return true;
}

void CSStart::Swap(CSStart* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CSStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CSStart_descriptor_;
  metadata.reflection = CSStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSError::kCodeFieldNumber;
const int CSError::kDescFieldNumber;
#endif  // !_MSC_VER

CSError::CSError()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void CSError::InitAsDefaultInstance() {
}

CSError::CSError(const CSError& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSError::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  desc_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSError::~CSError() {
  SharedDtor();
}

void CSError::SharedDtor() {
  if (desc_ != &::google_public::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void CSError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CSError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSError_descriptor_;
}

const CSError& CSError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

CSError* CSError::default_instance_ = NULL;

CSError* CSError::New() const {
  return new CSError;
}

void CSError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_desc()) {
      if (desc_ != &::google_public::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSError::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // required string desc = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSError::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required string desc = 2;
  if (has_desc()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* CSError::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required string desc = 2;
  if (has_desc()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSError::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSError* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CSError*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSError::MergeFrom(const CSError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSError::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSError::CopyFrom(const CSError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSError::Swap(CSError* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CSError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CSError_descriptor_;
  metadata.reflection = CSError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBody::kSynFieldNumber;
const int CSBody::kAckFieldNumber;
const int CSBody::kAuthFieldNumber;
const int CSBody::kPassportFieldNumber;
const int CSBody::kStartFieldNumber;
const int CSBody::kDataFieldNumber;
const int CSBody::kErrorFieldNumber;
#endif  // !_MSC_VER

CSBody::CSBody()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void CSBody::InitAsDefaultInstance() {
  syn_ = const_cast< ::connector_client::CSSyn*>(&::connector_client::CSSyn::default_instance());
  ack_ = const_cast< ::connector_client::CSSynAck*>(&::connector_client::CSSynAck::default_instance());
  auth_ = const_cast< ::connector_client::CSAuth*>(&::connector_client::CSAuth::default_instance());
  passport_ = const_cast< ::connector_client::CSPassport*>(&::connector_client::CSPassport::default_instance());
  start_ = const_cast< ::connector_client::CSStart*>(&::connector_client::CSStart::default_instance());
  error_ = const_cast< ::connector_client::CSError*>(&::connector_client::CSError::default_instance());
}

CSBody::CSBody(const CSBody& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBody::SharedCtor() {
  _cached_size_ = 0;
  syn_ = NULL;
  ack_ = NULL;
  auth_ = NULL;
  passport_ = NULL;
  start_ = NULL;
  data_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBody::~CSBody() {
  SharedDtor();
}

void CSBody::SharedDtor() {
  if (data_ != &::google_public::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
    delete syn_;
    delete ack_;
    delete auth_;
    delete passport_;
    delete start_;
    delete error_;
  }
}

void CSBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CSBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBody_descriptor_;
}

const CSBody& CSBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

CSBody* CSBody::default_instance_ = NULL;

CSBody* CSBody::New() const {
  return new CSBody;
}

void CSBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_syn()) {
      if (syn_ != NULL) syn_->::connector_client::CSSyn::Clear();
    }
    if (has_ack()) {
      if (ack_ != NULL) ack_->::connector_client::CSSynAck::Clear();
    }
    if (has_auth()) {
      if (auth_ != NULL) auth_->::connector_client::CSAuth::Clear();
    }
    if (has_passport()) {
      if (passport_ != NULL) passport_->::connector_client::CSPassport::Clear();
    }
    if (has_start()) {
      if (start_ != NULL) start_->::connector_client::CSStart::Clear();
    }
    if (has_data()) {
      if (data_ != &::google_public::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_error()) {
      if (error_ != NULL) error_->::connector_client::CSError::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBody::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .connector_client.CSSyn syn = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ack;
        break;
      }

      // optional .connector_client.CSSynAck ack = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ack:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_auth;
        break;
      }

      // optional .connector_client.CSAuth auth = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_passport;
        break;
      }

      // optional .connector_client.CSPassport passport = 4;
      case 4: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passport:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_passport()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_start;
        break;
      }

      // optional .connector_client.CSStart start = 5;
      case 5: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_data;
        break;
      }

      // optional bytes data = 16;
      case 16: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_error;
        break;
      }

      // optional .connector_client.CSError error = 100;
      case 100: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBody::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // optional .connector_client.CSSyn syn = 1;
  if (has_syn()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->syn(), output);
  }

  // optional .connector_client.CSSynAck ack = 2;
  if (has_ack()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ack(), output);
  }

  // optional .connector_client.CSAuth auth = 3;
  if (has_auth()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->auth(), output);
  }

  // optional .connector_client.CSPassport passport = 4;
  if (has_passport()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->passport(), output);
  }

  // optional .connector_client.CSStart start = 5;
  if (has_start()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->start(), output);
  }

  // optional bytes data = 16;
  if (has_data()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBytes(
      16, this->data(), output);
  }

  // optional .connector_client.CSError error = 100;
  if (has_error()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* CSBody::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // optional .connector_client.CSSyn syn = 1;
  if (has_syn()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->syn(), target);
  }

  // optional .connector_client.CSSynAck ack = 2;
  if (has_ack()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ack(), target);
  }

  // optional .connector_client.CSAuth auth = 3;
  if (has_auth()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->auth(), target);
  }

  // optional .connector_client.CSPassport passport = 4;
  if (has_passport()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->passport(), target);
  }

  // optional .connector_client.CSStart start = 5;
  if (has_start()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->start(), target);
  }

  // optional bytes data = 16;
  if (has_data()) {
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->data(), target);
  }

  // optional .connector_client.CSError error = 100;
  if (has_error()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .connector_client.CSSyn syn = 1;
    if (has_syn()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syn());
    }

    // optional .connector_client.CSSynAck ack = 2;
    if (has_ack()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ack());
    }

    // optional .connector_client.CSAuth auth = 3;
    if (has_auth()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auth());
    }

    // optional .connector_client.CSPassport passport = 4;
    if (has_passport()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->passport());
    }

    // optional .connector_client.CSStart start = 5;
    if (has_start()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

    // optional bytes data = 16;
    if (has_data()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .connector_client.CSError error = 100;
    if (has_error()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBody::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBody* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CSBody*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBody::MergeFrom(const CSBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_syn()) {
      mutable_syn()->::connector_client::CSSyn::MergeFrom(from.syn());
    }
    if (from.has_ack()) {
      mutable_ack()->::connector_client::CSSynAck::MergeFrom(from.ack());
    }
    if (from.has_auth()) {
      mutable_auth()->::connector_client::CSAuth::MergeFrom(from.auth());
    }
    if (from.has_passport()) {
      mutable_passport()->::connector_client::CSPassport::MergeFrom(from.passport());
    }
    if (from.has_start()) {
      mutable_start()->::connector_client::CSStart::MergeFrom(from.start());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_error()) {
      mutable_error()->::connector_client::CSError::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBody::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBody::CopyFrom(const CSBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBody::IsInitialized() const {

  if (has_syn()) {
    if (!this->syn().IsInitialized()) return false;
  }
  if (has_ack()) {
    if (!this->ack().IsInitialized()) return false;
  }
  if (has_auth()) {
    if (!this->auth().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void CSBody::Swap(CSBody* other) {
  if (other != this) {
    std::swap(syn_, other->syn_);
    std::swap(ack_, other->ack_);
    std::swap(auth_, other->auth_);
    std::swap(passport_, other->passport_);
    std::swap(start_, other->start_);
    std::swap(data_, other->data_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CSBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CSBody_descriptor_;
  metadata.reflection = CSBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsg::kHeadFieldNumber;
const int CSMsg::kBodyFieldNumber;
#endif  // !_MSC_VER

CSMsg::CSMsg()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void CSMsg::InitAsDefaultInstance() {
  head_ = const_cast< ::connector_client::CSHead*>(&::connector_client::CSHead::default_instance());
  body_ = const_cast< ::connector_client::CSBody*>(&::connector_client::CSBody::default_instance());
}

CSMsg::CSMsg(const CSMsg& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsg::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsg::~CSMsg() {
  SharedDtor();
}

void CSMsg::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete body_;
  }
}

void CSMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* CSMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsg_descriptor_;
}

const CSMsg& CSMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

CSMsg* CSMsg::default_instance_ = NULL;

CSMsg* CSMsg::New() const {
  return new CSMsg;
}

void CSMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::connector_client::CSHead::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::connector_client::CSBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsg::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .connector_client.CSHead head = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required .connector_client.CSBody body = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsg::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required .connector_client.CSHead head = 1;
  if (has_head()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // required .connector_client.CSBody body = 2;
  if (has_body()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* CSMsg::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required .connector_client.CSHead head = 1;
  if (has_head()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // required .connector_client.CSBody body = 2;
  if (has_body()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .connector_client.CSHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // required .connector_client.CSBody body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsg::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsg* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const CSMsg*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsg::MergeFrom(const CSMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::connector_client::CSHead::MergeFrom(from.head());
    }
    if (from.has_body()) {
      mutable_body()->::connector_client::CSBody::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsg::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsg::CopyFrom(const CSMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_body()) {
    if (!this->body().IsInitialized()) return false;
  }
  return true;
}

void CSMsg::Swap(CSMsg* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata CSMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = CSMsg_descriptor_;
  metadata.reflection = CSMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace connector_client

// @@protoc_insertion_point(global_scope)
